<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport">
	<title>WLED Settings</title>
	<script src="common.js" async type="text/javascript"></script>
	<script>
        let ws;
		function S() {
			getLoc();
			loadJS(getURL('/settings/s.js?p=0'), false);	// If we set async false, file is loaded and executed, then next statement is processed
		}
		function getURL(path) {
			return (loc ? locproto + "//" + locip : "") + path;
		}
        function requestTrophyData() {
            if (!ws || ws.readyState !== WebSocket.OPEN) {
                makeDeadlineTrophyWs();
            } else {
                ws.send("{'dl':true}");
            }
        }
        function makeDeadlineTrophyWs() {
            if (ws) {
                ws.close();
                setTimeout(requestTrophyData, 1000);
                return;
            }
            let url = loc ? getURL('/ws').replace("http","ws") : "ws://"+window.location.hostname+"/ws";
            ws = new WebSocket(url);
            const refreshButton = gId("dl_refresh");
            ws.onmessage = e => {
                let json;
                try {
                    json = JSON.parse(e.data);
                } catch (err) {
                    console.info("[QM-DEBUG] WebSocket: Invalid JSON", e.data);
                    return;
                }
                if (d.DEBUG) console.log("[DEBUG] WebSocket Data", json);
                if (json.dl) {
                    updateTrophyReadings(json.dl);
                    setTimeout(requestTrophyData, 2000);
                }
            };
            ws.onclose = e => {
                if (d.DEBUG) console.log("[DEBUG] WebSocket closed.");
                setTimeout(makeDeadlineTrophyWs, 5000);
                ws = null;
                refreshButton.style.display = "";
            };
            ws.onopen = e => {
                if (d.DEBUG) console.log("[DEBUG] WebSocket opened.");
                requestTrophyData();
                refreshButton.style.display = "none";
            }
        }
        function updateTrophyReadings(data) {
            gId("dl_readings").style.display = "flex";
            gId("dl_tempK").innerText = `${data.T} °C`;
            gId("dl_tempK_info").innerText = `[${data.minT}, ${data.maxT}] °C, ADC = ${data.adcT}`;
            gId("dl_vcc").innerText = `${data.VCC} V`;
            gId("dl_vcc_info").innerText = `[${data.minVCC}, ${data.maxVCC}] V`; // ADC = ${data.adcV}
            gId("dl_attenuate").innerText = `x ${data.att}`;
            attBy = [data.aboveT ? "> T" : "", data.belowV ? "< V" : ""].filter(b => !!b);
            gId("dl_attenuate_info").innerText = attBy.join(" / ");
        }
	</script>
	<style>
		body {
			text-align: center;
			background: #222;
			height: 100px;
			margin: 0;
		}
		html {
			--h: 9vh;
		}
		button {
			background: #333;
			color: #fff;
			font-family: Verdana, Helvetica, sans-serif;
			display: block;
			border: 1px solid #333;
			border-radius: var(--h);
			font-size: 6vmin;
			height: var(--h);
			width: calc(100% - 40px);
			margin: 2vh auto 0;
			cursor: pointer;
		}
        #dl_readings {
            font-family: "Comic Sans MS", "Comic Sans", cursive, sans-serif;
            color: hotpink;
            text-align: center;
            font-size: x-large;
            display: none;
            flex-direction: column;
        }
        #dl_readings td:last-of-type {
            font-size: smaller;
            opacity: 0.7;
        }
        #dl_readings button {
            font-size: smaller;
            width: fit-content;
            padding: 1rem;
            margin-bottom: 2rem;
        }
        .dl_hidden {
            display: none;
        }
	</style>
</head>
<body onload="S()">
<button type=submit id="b" onclick="window.location=getURL('/')">Back</button>
<button type="submit" onclick="window.location=getURL('/settings/wifi')">WiFi Setup</button>
<button type="submit" onclick="window.location=getURL('/settings/leds')">Trophy LEDS</button>
<button type="submit" onclick="window.location=getURL('/settings/um')">Usermods</button>
<button type="submit" onclick="window.location=getURL('/settings/sync')">Sync Interfaces</button>
<button type="submit" onclick="window.location=getURL('/settings/sec')">Security & Updates</button>

<!-- HIDE FOR DEADLINE TROPHY -->
<div class="dl_hidden">
    <button type="submit" onclick="window.location=getURL('/settings/ui')">User Interface</button>
    <button id="dmxbtn" style="display:none;" type="submit" onclick="window.location=getURL('/settings/dmx')">DMX Output</button>
    <button type="submit" onclick="window.location=getURL('/settings/time')">Time & Macros</button>
    <button id="2dbtn" type="submit" onclick="window.location=getURL('/settings/2D')">2D Configuration</button>
</div>

<div id="dl_readings">
    <h3 oncontextmenu="d.DEBUG = !d.DEBUG">
        Trophy Readings
    </h3>
    <table>
        <tbody>
            <tr>
                <th width="33%">T<sub>logo</sub></th>
                <td width="33%" id="dl_tempK">?</td>
                <td width="33%" id="dl_tempK_info"></td>
            </tr>
            <tr>
                <th>V<sub>CC</sub></th>
                <td id="dl_vcc">?</td>
                <td id="dl_vcc_info"></td>
            </tr>
            <tr>
                <th>brightness factor</th>
                <td id="dl_attenuate">?</td>
                <td id="dl_attenuate_info"></td>
            </tr>
        </tbody>
    </table>
    <button
        id="dl_refresh"
        onclick="requestTrophyData"
        oncontextmenu="gId('dl_hidden').style.display='';"
        >
        Refresh Readings
    </button>
</div>

</body>
</html>