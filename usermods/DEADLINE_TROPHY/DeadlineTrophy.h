#pragma once

#include "wled.h"

const int PIN_LOGO_DATA = 21;
const int PIN_LOGO_CLOCK = 3;
const int PIN_BASE_DATA = 19;
const int PIN_BASE_CLOCK = 18;
const int PIN_BACK_SPOT = 26;
const int PIN_FLOOR_SPOT = 27;

const int LED_TYPE_HD107S = TYPE_APA102;
const int LED_SINGLE_WHITE = TYPE_ANALOG_MIN;

namespace DeadlineTrophy {

    const int N_LEDS_LOGO = 106;
    const int N_LEDS_BASE = 64;
    const int N_LEDS_TOTAL = N_LEDS_LOGO + N_LEDS_BASE + 2;

    uint16_t maxMilliAmps(uint16_t nLeds);
    BusConfig createBus(uint8_t type, uint16_t count, uint16_t start, uint8_t pin1, uint8_t pin2 = 255);

    // Usermods usually only care about their own stuff, but:
    // "You're remembered for the rules you break" - Stockton Rush (OceanGate CEO)
    void overwriteConfig();

    const int logoW = 27;
    const int logoH = 21;
    const int baseSize = 18; // edge length 16 + 2 of the adjacent edges

    const int mappingSize = (logoW) * (logoH + baseSize);
    const uint16_t __ = (uint16_t)-1;
    // <-- this masks the gaps for easier debugging / reading the code below

    // this Matrix-Linear-Hybrid thing is not great, with the single LEDs shoe-horned in there, but that's what we have.
    // (the empty lines are due to the actual non-equidistant lines in the logo)
    const uint16_t mappingTable[mappingSize] = {
        __, __, __,161, __,162, __,163, __,164, __,165, __,166, __,167, __,168, __,169, __, __, __, __, __, __, __,
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,
        __, __,160, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,
        __,159, __,158, __,157, __,156, __,155, __,154, __,153, __,152, __,151, __,150, __,149, __, __, __, __, __,
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,
       137, __,138, __,139, __,140, __,141, __,142, __,143, __,144, __,145, __,146, __,147, __,148, __, __, __, __,
        __,136, __,135, __,134, __,133, __,132, __,131, __,130, __,129, __,128, __,127, __,126, __,125, __, __, __,
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,
        __, __, 64, __, 65, __, 66, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,123, __,124, __, __,
        __, __, __, 69, __, 68, __, 67, __, __, __, __, __, __, __, __, __, __, __, __, __,122, __,121, __,120, __,
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,
        __, __, __, __, 70, __, 71, __, 72, __, __, __, __, __, __, __, __, __, __, __,117, __,118, __,119, __, __,
        __, __, __, __, __, 75, __, 74, __, 73, __, __, __, __, __, __, __, __, __,116, __,115, __,114, __, __, __,
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,
        __, __, __, __, __, __, 76, __, 77, __, 78, __, __, __, __, __, __, __,111, __,112, __,113, __, __, __, __,
        __, __, __, __, __, __, __, 81, __, 80, __, 79, __, __, __, __, __, __, __,110, __,109, __, __, __, __, __,
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,
        __, __, __, __, __, __, __, __, 82, __, 83, __, 84, __, 85, __, 86, __, 87, __, 88, __, 89, __, 90, __, __,
        __, __, __, __, __, __, __, __, __, 99, __, 98, __, 97, __, 96, __, 95, __, 94, __, 93, __, 92, __, 91, __,
        __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,
        __, __, __, __, __, __, __, __, __, __,100, __,101, __,102, __,103, __,104, __,105, __,106, __,107, __,108,
        __, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, __,170, __, __, __, __, __, __, __, __,
        47, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,  0,171, __, __, __, __, __, __, __, __,
        46, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,  1, __, __, __, __, __, __, __, __, __,
        45, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,  2, __, __, __, __, __, __, __, __, __,
        44, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,  3, __, __, __, __, __, __, __, __, __,
        43, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,  4, __, __, __, __, __, __, __, __, __,
        42, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,  5, __, __, __, __, __, __, __, __, __,
        41, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,  6, __, __, __, __, __, __, __, __, __,
        40, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,  7, __, __, __, __, __, __, __, __, __,
        39, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,  8, __, __, __, __, __, __, __, __, __,
        38, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __,  9, __, __, __, __, __, __, __, __, __,
        37, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 10, __, __, __, __, __, __, __, __, __,
        36, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 11, __, __, __, __, __, __, __, __, __,
        35, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 12, __, __, __, __, __, __, __, __, __,
        34, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 13, __, __, __, __, __, __, __, __, __,
        33, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 14, __, __, __, __, __, __, __, __, __,
        32, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, __, 15, __, __, __, __, __, __, __, __, __,
        __, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, __, __, __, __, __, __, __, __, __, __,
    };

    struct Coord { uint8_t x; uint8_t y; };

    std::array<Coord, N_LEDS_LOGO>& logoCoordinates();

    static const size_t N_SEGMENTS = 4;
    extern const char* segmentName[N_SEGMENTS];
    extern const Segment segment[N_SEGMENTS];
    extern const uint8_t segmentCapabilities[N_SEGMENTS];

}
